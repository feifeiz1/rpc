// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package short_link

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
	common "github.com/feifeiz1/rpc/kitex_gen/common"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *GenLinkReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenLinkReq[number], err)
}

func (x *GenLinkReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Url, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenLinkRsp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 100:
		offset, err = x.fastReadField100(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GenLinkRsp[number], err)
}

func (x *GenLinkRsp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Short, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GenLinkRsp) fastReadField100(buf []byte, _type int8) (offset int, err error) {
	var v common.CommonRsp
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.CommonRsp = &v
	return offset, nil
}

func (x *GenLinkReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GenLinkReq) fastWriteField1(buf []byte) (offset int) {
	if x.Url == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetUrl())
	return offset
}

func (x *GenLinkRsp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField100(buf[offset:])
	return offset
}

func (x *GenLinkRsp) fastWriteField1(buf []byte) (offset int) {
	if x.Short == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetShort())
	return offset
}

func (x *GenLinkRsp) fastWriteField100(buf []byte) (offset int) {
	if x.CommonRsp == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 100, x.GetCommonRsp())
	return offset
}

func (x *GenLinkReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GenLinkReq) sizeField1() (n int) {
	if x.Url == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetUrl())
	return n
}

func (x *GenLinkRsp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField100()
	return n
}

func (x *GenLinkRsp) sizeField1() (n int) {
	if x.Short == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetShort())
	return n
}

func (x *GenLinkRsp) sizeField100() (n int) {
	if x.CommonRsp == nil {
		return n
	}
	n += fastpb.SizeMessage(100, x.GetCommonRsp())
	return n
}

var fieldIDToName_GenLinkReq = map[int32]string{
	1: "Url",
}

var fieldIDToName_GenLinkRsp = map[int32]string{
	1:   "Short",
	100: "CommonRsp",
}

var _ = common.File_common_common_proto
